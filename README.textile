h1. Noregress â€“ A Java Library To Catch Regressions In Your Website's Performance

Noregress lets you write simple junit tests to ensure your websites' performance does not degrade over time.

Noregress uses "Google PageSpeed Online API":http://code.google.com/apis/pagespeedonline/v1/reference.html. You will need to register with Google and obtain a (free) API key before using Noregress.

h2. Using Noregress

h3. Step 1 : Get an API key from Google

* Visit "Google's API Console":https://code.google.com/apis/console. In the Services pane, activate Page Speed Online API; if the Terms of Service appear, read and accept them
* Next, go to the "API Access pane":https://code.google.com/apis/console#access. The API key is near the bottom of that pane, in the section titled "Simple API Access." 

Consult "Google's API Console Help":http://code.google.com/apis/console-help/#WhatIsKey if you need more information.

h3. Step 2 : Download Noregress Library

For maven users :

<pre>
<code>
	<dependency>
		<groupId>org.noregress</groupId>
		<artifactId>noregress</artifactId>
		<version>0.1.1</version>
		<scope>test</scope>
	</dependency>
</code>
</pre>

If you don't use maven, "download the jar from sonatype repository":https://oss.sonatype.org/content/repositories/releases/org/noregress/noregress/0.1.1/noregress-0.1.1.jar

h3. Step 3 : Writing Test Cases

<pre>
<code>
PageTester client = new PageSpeedOnlineV1Service("<YOUR-PAGE-SPEED-API-KEY>");
Result result = client.testPage(new Request("http://example.com"));

/*
 * Basic Assertions
 */
assertEquals("Http Response Code", 200, result.getResponseCode());
assertEquals("404's on page", 100, result.getScoreFor(Rule.AvoidBadRequests));
assertEquals("Same image/css/js served from different URLs", 100, result.getScoreFor(Rule.ServeResourcesFromAConsistentUrl));


/*
 * The overall page score as determined by Page Speed
 * If it fails, you will not know what caused the failure, so use it with caution
 */
assertTrue("Overall page score below threshold", result.getOverallScore() > 80);

/*
 * If somebody adds a new image or a new css/js file, these tests will catch them
 */
assertTrue("Too many resources on page", result.getNumberResources() < 35);
assertTrue("Too many JS resources on page", result.getNumberJsResources() < 5);

/*
 * If you are missing cache headers..
 */
assertTrue("Poor cache headers on static resources", result.getScoreFor(Rule.LeverageBrowserCaching) > 95);

/*
 * Several other tests possible - check javadocs for more information
 */

</code>
</pre>

h2. How does Noregress work?

# Noregress makes a call to Google Page Speed Online API with the URL of your website 
# Google's servers make a request to your website, analyse the performance and return a JSON result
# Noregress parses the result and provides a convenient API to assert there are no regressions 

Noregress can be made to work against WebPageTest.org 's REST API. That's a TODO. See Issue #1

h2. Best Practices

# Use Noregress as part of your integration tests. Its a great idea to run these tests along with your Selenium tests
# Make lots of small "actionable assertions", instead of one big assertion. For example, asserting the overall page score will catch all regressions, but you won't know what change caused that regression. Instead, checking for something like "Number of JS resources on a page" will tell you exactly what broke the test and how to fix it.
# You have a limit of 250 requests a day. Assuming you do 10 commits per day, you can test 25 pages on your website. Choose wisely!


h2. Anything else I should know?

# This library wraps Google's API, so you should read and comply with their terms and conditions 
# You can only test 250 pages per day. This limit is set by Google's Page Speed API 
# The pages need to be accessible over public internet. You cannot use this library behind the firewall
# You cannot use this library for password protected pages

h2. License

Noregress is licensed under the MIT License

h2. Author

Sripathi Krishnan
Email : <FirstName> <dot> <LastName> at gmail.com
