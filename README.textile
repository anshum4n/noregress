h1. Noregress â€“ A Java Library To Catch Regressions In Your Website's Performance

Noregress lets you write simple junit tests to ensure your websites' performance does not degrade over time.

Noregress uses "Google PageSpeed Online API":http://code.google.com/apis/pagespeedonline/v1/reference.html. You will need to register with Google and obtain a (free) API key before using Noregress.

h2. How it works

# Noregress makes calls Google Page Speed Online API with the URL of your website 
# Google's servers make a request to your website and analyse the performance
# Noregress parses the result and provides a convenient API to assert the performance

h2. Using Noregress

h3. Step 1 : Getting Google Page Speed API Key

* To acquire an API key, visit the "Google APIs Console":https://code.google.com/apis/console. In the Services pane, activate the Page Speed Online API; if the Terms of Service appear, read and accept them
* Next, go to the "API Access pane":https://code.google.com/apis/console#access. The API key is near the bottom of that pane, in the section titled "Simple API Access." 

You will need the API key when you write your test cases in Step 3

h3. Step 2 : Download Noregress Library

For maven users :

<pre>
<code>
	<dependency>
		<groupId>org.noregress</groupId>
		<artifactId>noregress</artifactId>
		<version>0.1.1</version>
		<scope>test</scope>
	</dependency>
</code>
</pre>

If you don't use maven, "download the jar from sonatype repository":https://oss.sonatype.org/content/repositories/releases/org/noregress/noregress/0.1.1/noregress-0.1.1.jar

h3. Step 3 : Writing Test Cases

<pre>
<code>
PageTester client = new PageSpeedOnlineV1Service("<YOUR-PAGE-SPEED-API-KEY>");
Result result = client.testPage(new Request("http://example.com"));

/*
 * Basic Assertions
 */
assertEquals("Http Response Code", 200, result.getResponseCode());
assertEquals("404's on page", 100, result.getScoreFor(Rule.AvoidBadRequests));
assertEquals("Same image/css/js served from different URLs", 100, result.getScoreFor(Rule.ServeResourcesFromAConsistentUrl));


/*
 * The overall page score as determined by Page Speed
 * If it fails, you will not know what caused the failure, so use it with caution
 */
assertTrue("Overall page score below threshold", result.getOverallScore() > 80);

/*
 * If somebody adds a new image or a new css/js file, these tests will catch them
 */
assertTrue("Too many resources on page", result.getNumberResources() < 35);
assertTrue("Too many JS resources on page", result.getNumberJsResources() < 5);

/*
 * If you are missing cache headers..
 */
assertTrue("Poor cache headers on static resources", result.getScoreFor(Rule.LeverageBrowserCaching) > 95);

/*
 * Several other tests possible - check javadocs for more information
 */

</code>
</pre>

h2. Anything else I should know?

* This library wraps Google's API. You should read and comply with their terms and conditions
** Specifically, there is a limit of 250 requests per day
* When Issue #1 is complete, Noregress can optionally work against the "API provided by WebPageTest.org":https://sites.google.com/a/webpagetest.org/docs/advanced-features/webpagetest-restful-apis


h2. License

Noregress is licensed under the MIT License

h2. Author

Sripathi Krishnan - Sripathi.Krishnan@gmail.com

